{"ast":null,"code":"export const BASE_URL = 'http://localhost:4000';\nconst checkRes = res => {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Статус ошибки: ${res.status}`);\n};\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkRes);\n};\nexport const authorise = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkRes).then(data => {\n    if (data.token) {\n      const {\n        token\n      } = data;\n      localStorage.setItem('jwt', token);\n      return token;\n    }\n    ;\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    }\n  }).then(checkRes);\n};","map":{"version":3,"names":["BASE_URL","checkRes","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","authorise","data","token","localStorage","setItem","checkToken","authorization"],"sources":["C:/Users/AdminPC/dev/mesto-exp-full/frontend/src/utils/ApiAuth.js"],"sourcesContent":["export const BASE_URL = 'http://localhost:4000';\r\n\r\nconst checkRes = (res) => {\r\n  if (res.ok) {\r\n    return res.json()\r\n  }\r\n  return Promise.reject(`Статус ошибки: ${res.status}`)\r\n}\r\n\r\nexport const register = (email, password) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n  .then(checkRes)\r\n}\r\n\r\nexport const authorise = (email, password) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n  .then(checkRes)\r\n  .then((data) => {\r\n    if (data.token) {\r\n      const { token } = data;\r\n      localStorage.setItem('jwt', token);\r\n      return token;\r\n    };\r\n  })\r\n}\r\n\r\nexport const checkToken = (token) => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    }\r\n  })\r\n  .then(checkRes)\r\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAE/C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EACxB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,kBAAiBJ,GAAG,CAACK,MAAO,EAAC,CAAC;AACvD,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,QAAQ,CAAC;AACjB,CAAC;AAED,OAAO,MAAMiB,SAAS,GAAGA,CAACT,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAChB,QAAQ,CAAC,CACdgB,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd,MAAM;QAAEA;MAAM,CAAC,GAAGD,IAAI;MACtBE,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,KAAK,CAAC;MAClC,OAAOA,KAAK;IACd;IAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIH,KAAK,IAAK;EACnC,OAAOT,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAG,UAASJ,KAAM;IACjC;EACF,CAAC,CAAC,CACDH,IAAI,CAAChB,QAAQ,CAAC;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}